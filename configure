#!/usr/bin/env bash

set -euo pipefail

show_help() {
  cat <<'EOF'
Usage: ./configure [options]

Generate build configuration for the utoronto-fms-workshop-pytorch project.

Options:
  --image-name NAME      Docker image repository name (default: utoronto-fms-workshop-pytorch)
  --image-tag TAG        Docker image tag (default: latest)
  --registry REGISTRY    Container registry prefix (default: ghcr.io/CARTE-Toronto)
  --no-registry          Do not prefix the image with a registry (overrides default)
  --ghcr                 Alias for the default GitHub Container Registry namespace
  --dockerfile PATH      Path to the Dockerfile (default: Dockerfile)
  --context PATH         Docker build context (default: .)
  --dist-dir PATH        Directory where build artifacts are written (default: dist)
  --uv-env PATH          Target directory for local uv sync operations (default: .venv)
  --progress MODE        Default progress mode passed to docker build (e.g. plain)
  -h, --help             Show this help message and exit

Examples:
  ./configure --image-tag 2024.10.31
  ./configure --image-tag 2024.10.31 --registry ghcr.io/example
EOF
}

IMAGE_NAME="utoronto-fms-workshop-pytorch"
IMAGE_TAG="latest"
DOCKERFILE="Dockerfile"
DOCKER_CONTEXT="."
DIST_DIR="dist"
UV_ENV=".venv"
DOCKER_PROGRESS=""
DEFAULT_GHCR_REGISTRY="ghcr.io/carte-toronto"
IMAGE_REGISTRY="${DEFAULT_GHCR_REGISTRY}"

while [[ $# -gt 0 ]]; do
  case "$1" in
    --image-name)
      IMAGE_NAME="$2"
      shift 2
      ;;
    --image-name=*)
      IMAGE_NAME="${1#*=}"
      shift
      ;;
    --image-tag)
      IMAGE_TAG="$2"
      shift 2
      ;;
    --image-tag=*)
      IMAGE_TAG="${1#*=}"
      shift
      ;;
    --registry)
      IMAGE_REGISTRY="$2"
      shift 2
      ;;
    --registry=*)
      IMAGE_REGISTRY="${1#*=}"
      shift
      ;;
    --no-registry)
      IMAGE_REGISTRY=""
      shift
      ;;
    --ghcr)
      IMAGE_REGISTRY="${DEFAULT_GHCR_REGISTRY}"
      shift
      ;;
    --dockerfile)
      DOCKERFILE="$2"
      shift 2
      ;;
    --dockerfile=*)
      DOCKERFILE="${1#*=}"
      shift
      ;;
    --context)
      DOCKER_CONTEXT="$2"
      shift 2
      ;;
    --context=*)
      DOCKER_CONTEXT="${1#*=}"
      shift
      ;;
    --dist-dir)
      DIST_DIR="$2"
      shift 2
      ;;
    --dist-dir=*)
      DIST_DIR="${1#*=}"
      shift
      ;;
    --uv-env)
      UV_ENV="$2"
      shift 2
      ;;
    --uv-env=*)
      UV_ENV="${1#*=}"
      shift
      ;;
    --progress)
      DOCKER_PROGRESS="$2"
      shift 2
      ;;
    --progress=*)
      DOCKER_PROGRESS="${1#*=}"
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "Unknown option: $1" >&2
      echo "Use ./configure --help for usage." >&2
      exit 1
      ;;
  esac
done

if [[ ! -f "pyproject.toml" ]]; then
  echo "Error: pyproject.toml not found in $(pwd)" >&2
  exit 1
fi

if [[ ! -f "uv.lock" ]]; then
  echo "Warning: uv.lock not found. Run 'uv lock' to generate it before building." >&2
fi

config_file="config.mk"

cat > "${config_file}" <<EOF
# Generated by ./configure on $(date -u +"%Y-%m-%dT%H:%M:%SZ")

IMAGE_NAME ?= ${IMAGE_NAME}
IMAGE_TAG ?= ${IMAGE_TAG}
IMAGE_REGISTRY ?= ${IMAGE_REGISTRY}
DOCKERFILE ?= ${DOCKERFILE}
DOCKER_CONTEXT ?= ${DOCKER_CONTEXT}
DOCKER_PROGRESS ?= ${DOCKER_PROGRESS}
DIST_DIR ?= ${DIST_DIR}
UV_ENV ?= ${UV_ENV}

IMAGE_REPOSITORY := \$(if \$(IMAGE_REGISTRY),\$(IMAGE_REGISTRY)/\$(IMAGE_NAME),\$(IMAGE_NAME))
IMAGE_REF := \$(IMAGE_REPOSITORY):\$(IMAGE_TAG)
DIST_IMAGE_TAR ?= \$(DIST_DIR)/\$(IMAGE_NAME)-\$(IMAGE_TAG).tar
EOF

echo "Configuration written to ${config_file}."
echo "Next steps:"
echo "  make            # build the Docker image"
echo "  make install    # export the image tarball"
